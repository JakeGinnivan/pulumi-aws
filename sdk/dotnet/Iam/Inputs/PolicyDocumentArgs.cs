// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Iam.Inputs
{

    /// <summary>
    /// You manage access in AWS by creating policies and attaching them to IAM identities or AWS resources. A policy is an
    /// object in AWS that, when associated with an entity or resource, defines their permissions. AWS evaluates these
    /// policies when a principal, such as a user, makes a request. Permissions in the policies determine whether the
    /// request is allowed or denied.
    /// 
    /// IAM policies define permissions for an action regardless of the method that you use to perform the operation. For
    /// example, if a policy allows the GetUser action, then a user with that policy can get user information from the
    /// AWS Management Console, the AWS CLI, or the AWS API. When you create an IAM user, you can set up the user to
    /// allow console or programmatic access. The IAM user can sign in to the console using a user name and password.
    /// Or they can use access keys to work with the CLI or API.
    /// 
    /// Most policies are stored in AWS as JSON documents. Identity-based policies, policies used to set boundaries, or AWS
    /// STS boundary policies are JSON policy documents that you attach to a user or role. Resource-based policies are JSON
    /// policy documents that you attach to a resource. SCPs are JSON policy documents with restricted syntax that you
    /// attach to an AWS Organizations organizational unit (OU). ACLs are also attached to a resource, but you must use a
    /// different syntax.
    /// 
    /// A JSON policy document includes these elements:
    /// 
    ///     - Optional policywide information at the top of the document
    ///     - One or more individual statements
    /// 
    /// Each statement includes information about a single permission. If a policy includes multiple statements, AWS applies
    /// a logical OR across the statements when evaluating them. If multiple policies apply to a request, AWS applies a
    /// logical OR across all of those policies when evaluating them.
    /// 
    /// For more details about IAM policies, please refer to the AWS documentation online:
    /// https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html
    /// </summary>
    public sealed class PolicyDocumentArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// An optional document ID
        /// </summary>
        [Input("Id")]
        public Input<string>? Id { get; set; }

        [Input("Statement", required: true)]
        private InputList<Inputs.PolicyStatementArgs>? _Statement;

        /// <summary>
        /// One or more policy statements, describing the effect, principal, action, resource, and condition.
        /// </summary>
        public InputList<Inputs.PolicyStatementArgs> Statement
        {
            get => _Statement ?? (_Statement = new InputList<Inputs.PolicyStatementArgs>());
            set => _Statement = value;
        }

        /// <summary>
        /// The version of the policy language that you want to use. As a best practice, use the latest `2012-10-17` version.
        /// </summary>
        [Input("Version", required: true)]
        public Input<string> Version { get; set; } = null!;

        public PolicyDocumentArgs()
        {
        }
    }
}
